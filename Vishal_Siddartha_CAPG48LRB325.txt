1. What is the difference between Overloading and Overriding?
Ans. When 2 or more methods in the same class have the same name but different parameters, is called Overloading.

	When the method	name and parameters are the same in superclass and the childclass, but the method definition is Overridden, its called Overriding
	
	public class A {
	public void function() {
		System.out.printf("function with no params");
		}
		# Overloading
		public void function(int i) {
			System.out.println("function with params:" + i);
		}
	}
	class B extends A {
		@Override
		public void function() {
			System.out.println("function with no params Override " );
		}
		@Override
		public void function(int i) {
			int sum=10+i;
			System.out.println("Sum of integer array elements is " + sum);
		}
	}


2. If both the functions are static, can we override them?
Ans. No. We can declare a static method with the same signature in a subclass, but it is not considered Overriding because there won't is any run-time polymorphism.

	If the derived class defines a static method with the same signature as a static method in the base class. the derived class method is hidden by the method in the base class.

	public class A {
	public static void function() {
		System.out.printf("function with no params");
		}
	}
	class B extends A {
		@Override
		public static void function() {
			System.out.println("function with no params Override " );
		}
	}
	public class Test {
    public static void main(String args[ ])  {
       A obj = new B();
       obj.function();    
    }
}
O/P: function with no params

3. Difference between Final, Finally, and Finalize?
Ans. final is the keyword and access modifier which is used to apply restrictions on a class, method, or variable.

	finally is the block in Java Exception Handling to execute the important code whether the exception occurs or not.

	finalize is the method in Java that is used to perform clean-up processing just before an object is a garbage collected.

4. What are marker Interfaces?
Ans. A marker interface is an interface that has no methods or constants inside it. It provides run-time type information about objects, so the compiler and JVM have additional information about the object.

5. What is Singleton class?
	Singleton is a design pattern that ensures that a class can only have one object.

	To create a singleton class, a class must implement the following properties:

	Create a private constructor of the class to restrict object creation outside of the class.
	Create a private attribute of the class type that refers to the single object.

6. What is the underlying Data structure for ArrayList and LinkedList
Ans. ArrayList is a resizable-array implementation, whereas LinkedList is a Doubly-linked list implementation of the List interface.

7.What is hash collitition?
Ans. A collision occurs when more than one value to be hashed by a particular hash function hash to the	same slot in the table or data structure 
	(hash table) being generated by the hash function.

8.What are lambda Expressions?
Ans. A lambda expression is a short block of code which takes in parameters and returns a value. Lambda expressions are similar to methods,
 	but they do not need a name and they can be implemented right in the body of a method.

9.Whats is functional interface?
Ans. A functional interface is an interface that contains only one abstract method.

 	They can have only one functionality to exhibit. From Java 8 onwards, lambda expressions can be used to represent the instance of a functional interface.

10.What are optional classes in Java 8?
Ans. optional class is a class which is used to avoid null ckecks and null pointer exception.

11. Whats is factory design pattern and Adapter and difference between them ?
Ans. A Factory Design Pattern is an interface or abstract class for creating an object but let the subclasses decide which class to instantiate.
	Adapter design pattern works as a bridge between two incompatible interfaces. This type of design pattern comes under structural pattern as this pattern combines the capability of two independent interfaces.

12. What are Solid principles ?
Ans. These principles establish practices that lend to developing software with considerations for maintaining and extending as the project grows. 

	Adopting these practices can also contribute to avoiding code smells, refactoring code, and Agile or Adaptive software development.

	Itâ€™s a mnemonic acronym for the following five design principles:
	Single Responsibility Principle
	Open/Closed Principle
	Liskov Substitution Principle
	Interface Segregation Principle
	Dependency Inversion

13. What does @component and @scan do in Sprinboot annaotation
Ans. @Component is an annotation that allows Spring to automatically detect our custom beans. 
	
	In other words, without having to write any explicit code, Spring will Scan our application for classes annotated with @Component. Instantiate them and inject any specified dependencies into them.

14. What is the Difference bew JPA , Hibernate and ORM?
Ans. Java Persistence API (JPA) defines the management of relational data in the Java applications. 

	Hibernate is a tool which is used to save the state of     Java object into the database. It is just a specification. Various ORM tools implement it for data persistence.

	Object-Relational Mapping (ORM) is the process of converting Java objects to database tables. In other words, this allows us to interact with a relational database without any SQL.

15. What is indexing in Database ?
Ans. Indexing is a way to optimize the performance of a database by minimizing the number of disk accesses required when a query is processed. 

	It is a data structure technique which is used to quickly locate and access the data in a database. 

16.What are 4 types of Drivers in JDBC ?
Ans. There are five types of JDBC drivers in use:

	Type 1: JDBC-ODBC bridge
	Type 2: partial Java driver
	Type 3: pure Java driver for database middleware
	Type 4: pure Java driver for direct-to-database
	Type 5: highly-functional drivers with superior performance

17.What is difference between @component and @bean and @service ?
Ans. @bean - It is used to explicitly declare a single bean, rather than letting Spring do it automatically. 

	@component - If any class is annotated with @Component it will be automatically detect by using classpath scan.

	@Service is a stereotype for the service layer.It annotates classes at the service layer.

18. What is difference between SOAP and restful services technically ?
Ans. SOAP stands for Simple Object Access Protocol.

	REST stands for REpresentational State Transfer.

	REST is a set of guidelines that offers flexible implementation, whereas SOAP is a protocol with specific requirements like XML messaging.

19 . Difference in POST and PUT ?
Ans. PUT method is call when you have to modify a single resource, which is already a part of resource collection.
	
	POST method is call when you have to add a child resource under resources collection

20. Is react uni directional or Bi directional ?
Ans. React, a Javascript library, uses unidirectional data flow and doesn't support bi-directional binding